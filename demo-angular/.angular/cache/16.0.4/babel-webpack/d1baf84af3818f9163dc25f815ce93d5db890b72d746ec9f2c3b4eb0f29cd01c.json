{"ast":null,"code":"import { HttpHeaders } from \"@angular/common/http\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass AuthenticateService {\n  constructor(http) {\n    this.http = http;\n    this.authenticated = false;\n    this.loginUrl = 'http://localhost:8080/user';\n  }\n  authenticate(cridentials, callback) {\n    const headers = new HttpHeaders(cridentials ? {\n      authorization: 'Basic ' + btoa(cridentials.username + ':' + cridentials.password)\n    } : {});\n    this.http.get(this.loginUrl, {\n      headers: headers\n    }).subscribe(response => {\n      if (response['name']) {\n        this.authenticated = true;\n      } else {\n        this.authenticated = false;\n      }\n      return callback && callback();\n    });\n  }\n}\nAuthenticateService.ɵfac = function AuthenticateService_Factory(t) {\n  return new (t || AuthenticateService)(i0.ɵɵinject(i1.HttpClient));\n};\nAuthenticateService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthenticateService,\n  factory: AuthenticateService.ɵfac,\n  providedIn: 'root'\n});\nexport { AuthenticateService };","map":{"version":3,"names":["HttpHeaders","AuthenticateService","constructor","http","authenticated","loginUrl","authenticate","cridentials","callback","headers","authorization","btoa","username","password","get","subscribe","response","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/Users/fenggu/Documents/Base/demo_angular/demo-angular/src/service/authenticate.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {HttpClient, HttpHeaders} from \"@angular/common/http\";\nimport {Credentials} from \"../entity/Credentials\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthenticateService {\n\n  authenticated = false;\n  loginUrl = 'http://localhost:8080/user';\n\n  constructor(private http: HttpClient) { }\n\n  authenticate(cridentials: Credentials, callback) {\n    const headers = new HttpHeaders(cridentials ? { authorization: 'Basic ' + btoa(cridentials.username + ':' +cridentials.password) } : {})\n    this.http.get(this.loginUrl, {headers: headers})\n      .subscribe(response => {\n        if (response['name']) {\n          this.authenticated = true;\n        } else {\n          this.authenticated = false;\n        }\n\n        return callback && callback();\n      });\n  }\n\n\n}\n\n"],"mappings":"AACA,SAAoBA,WAAW,QAAO,sBAAsB;;;AAG5D,MAGaC,mBAAmB;EAK9BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAHxB,KAAAC,aAAa,GAAG,KAAK;IACrB,KAAAC,QAAQ,GAAG,4BAA4B;EAEC;EAExCC,YAAYA,CAACC,WAAwB,EAAEC,QAAQ;IAC7C,MAAMC,OAAO,GAAG,IAAIT,WAAW,CAACO,WAAW,GAAG;MAAEG,aAAa,EAAE,QAAQ,GAAGC,IAAI,CAACJ,WAAW,CAACK,QAAQ,GAAG,GAAG,GAAEL,WAAW,CAACM,QAAQ;IAAC,CAAE,GAAG,EAAE,CAAC;IACxI,IAAI,CAACV,IAAI,CAACW,GAAG,CAAC,IAAI,CAACT,QAAQ,EAAE;MAACI,OAAO,EAAEA;IAAO,CAAC,CAAC,CAC7CM,SAAS,CAACC,QAAQ,IAAG;MACpB,IAAIA,QAAQ,CAAC,MAAM,CAAC,EAAE;QACpB,IAAI,CAACZ,aAAa,GAAG,IAAI;OAC1B,MAAM;QACL,IAAI,CAACA,aAAa,GAAG,KAAK;;MAG5B,OAAOI,QAAQ,IAAIA,QAAQ,EAAE;IAC/B,CAAC,CAAC;EACN;;AAnBWP,mBAAmB,C;mBAAnBA,mBAAmB,EAAAgB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAnBnB,mBAAmB,C;SAAnBA,mBAAmB;EAAAoB,OAAA,EAAnBpB,mBAAmB,CAAAqB,IAAA;EAAAC,UAAA,EAFlB;AAAM;SAEPtB,mBAAmB"},"metadata":{},"sourceType":"module","externalDependencies":[]}