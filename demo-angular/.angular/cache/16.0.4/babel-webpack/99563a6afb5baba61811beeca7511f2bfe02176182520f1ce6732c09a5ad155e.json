{"ast":null,"code":"import { HttpHeaders } from \"@angular/common/http\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass AuthenticateService {\n  constructor(http) {\n    this.http = http;\n    this.authenticated = false;\n    this.loginUrl = 'http://localhost:8080/token';\n    this.token = '';\n  }\n  authenticate(cridentials, callback) {\n    const headers = new HttpHeaders(cridentials ? {\n      authorization: 'Basic ' + btoa(cridentials.username + ':' + cridentials.password)\n    } : {});\n    this.http.get(this.loginUrl, {\n      headers: headers\n    }).subscribe(response => {\n      if (response['token']) {\n        this.authenticated = true;\n        const token = response['token'];\n        this.token = token;\n      } else {\n        this.authenticated = false;\n      }\n      console.log('login return:[', this.authenticated, '].');\n      return callback && callback();\n    });\n  }\n}\nAuthenticateService.ɵfac = function AuthenticateService_Factory(t) {\n  return new (t || AuthenticateService)(i0.ɵɵinject(i1.HttpClient));\n};\nAuthenticateService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthenticateService,\n  factory: AuthenticateService.ɵfac,\n  providedIn: 'root'\n});\nexport { AuthenticateService };","map":{"version":3,"names":["HttpHeaders","AuthenticateService","constructor","http","authenticated","loginUrl","token","authenticate","cridentials","callback","headers","authorization","btoa","username","password","get","subscribe","response","console","log","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/Users/fenggu/Documents/Base/demo_angular/demo-angular/src/service/authenticate.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {HttpClient, HttpHeaders} from \"@angular/common/http\";\nimport {Credentials} from \"../entity/Credentials\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthenticateService {\n\n  authenticated = false;\n  loginUrl = 'http://localhost:8080/token';\n  token: string = '';\n\n  constructor(private http: HttpClient) { }\n\n  authenticate(cridentials: Credentials, callback:any) {\n    const headers = new HttpHeaders(cridentials ? { authorization: 'Basic ' + btoa(cridentials.username + ':' +cridentials.password) } : {})\n    this.http.get(this.loginUrl, {headers: headers})\n      .subscribe((response:any) => {\n        if (response['token']) {\n          this.authenticated = true;\n          const token = response['token'];\n          this.token = token;\n        } else {\n          this.authenticated = false;\n        }\n        console.log('login return:[', this.authenticated, '].');\n\n        return callback && callback();\n      });\n  }\n\n\n}\n\n"],"mappings":"AACA,SAAoBA,WAAW,QAAO,sBAAsB;;;AAG5D,MAGaC,mBAAmB;EAM9BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAJxB,KAAAC,aAAa,GAAG,KAAK;IACrB,KAAAC,QAAQ,GAAG,6BAA6B;IACxC,KAAAC,KAAK,GAAW,EAAE;EAEsB;EAExCC,YAAYA,CAACC,WAAwB,EAAEC,QAAY;IACjD,MAAMC,OAAO,GAAG,IAAIV,WAAW,CAACQ,WAAW,GAAG;MAAEG,aAAa,EAAE,QAAQ,GAAGC,IAAI,CAACJ,WAAW,CAACK,QAAQ,GAAG,GAAG,GAAEL,WAAW,CAACM,QAAQ;IAAC,CAAE,GAAG,EAAE,CAAC;IACxI,IAAI,CAACX,IAAI,CAACY,GAAG,CAAC,IAAI,CAACV,QAAQ,EAAE;MAACK,OAAO,EAAEA;IAAO,CAAC,CAAC,CAC7CM,SAAS,CAAEC,QAAY,IAAI;MAC1B,IAAIA,QAAQ,CAAC,OAAO,CAAC,EAAE;QACrB,IAAI,CAACb,aAAa,GAAG,IAAI;QACzB,MAAME,KAAK,GAAGW,QAAQ,CAAC,OAAO,CAAC;QAC/B,IAAI,CAACX,KAAK,GAAGA,KAAK;OACnB,MAAM;QACL,IAAI,CAACF,aAAa,GAAG,KAAK;;MAE5Bc,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAE,IAAI,CAACf,aAAa,EAAE,IAAI,CAAC;MAEvD,OAAOK,QAAQ,IAAIA,QAAQ,EAAE;IAC/B,CAAC,CAAC;EACN;;AAvBWR,mBAAmB,C;mBAAnBA,mBAAmB,EAAAmB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAnBtB,mBAAmB,C;SAAnBA,mBAAmB;EAAAuB,OAAA,EAAnBvB,mBAAmB,CAAAwB,IAAA;EAAAC,UAAA,EAFlB;AAAM;SAEPzB,mBAAmB"},"metadata":{},"sourceType":"module","externalDependencies":[]}